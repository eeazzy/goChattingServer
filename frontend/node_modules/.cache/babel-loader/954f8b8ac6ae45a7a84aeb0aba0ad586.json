{"ast":null,"code":"var _jsxFileName = \"/Users/kimhyeonseo/Desktop/inflearn/golang_chat/frontend/src/components/ChatContainer.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport ChatInput from \"./ChatInput\";\nimport Logout from \"./Logout\";\nimport MakeNewRoom from \"./MakeNewRoom\";\nimport { host, socketHost } from \"../utils/APIRoutes\";\nimport axios from \"axios\";\nimport { useGlobalData } from \"../context/context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ChatContainer(_ref) {\n  _s();\n\n  let {\n    userName\n  } = _ref;\n  const [chattingList, setChattingList] = useState([]);\n  const [room, setRoom] = useState(false);\n  const [chatContents, setChatContents] = useState([]);\n  const [socketH, setSocketH] = useState(false);\n  const storage = useGlobalData();\n  useEffect(() => {\n    if (!room) {\n      async function fetchRoomList() {\n        const list = await axios.get(host + \"/room-list\");\n        setChattingList(list.data.result);\n      }\n\n      fetchRoomList();\n      setChatContents([]);\n      storage.setSocket(false);\n    } else {\n      console.log(room);\n\n      async function fetchBeforeChat() {\n        const res = await axios.get(host + `/enter-room?name=${room}`);\n\n        if (chatContents.length === 0) {\n          setChatContents(res.data.result);\n        }\n      }\n\n      fetchBeforeChat();\n      const socket = new WebSocket(socketHost);\n      setSocketH(socket);\n    }\n  }, [room]);\n\n  if (socketH) {\n    socketH.onopen = () => {\n      //webSocket이 맺어지고 난 후, 실행\n      console.log(socketH.current.readyState);\n      socketH.current.send(\"success\");\n    };\n\n    socketH.onmessage = function (e) {\n      const receiveData = JSON.parse(e.data);\n      console.log(chatContents);\n\n      if (chatContents.length === 0) {\n        setChatContents([receiveData]);\n      } else {\n        setChatContents([...chatContents, receiveData]);\n      }\n    };\n\n    socketH.onclose = function (e) {\n      console.log(e); // alert(\"서버가 닫혀있기 떄문에 로그아웃 됩니다.\");\n      // document.cookie =\n      //   \"auth\" +\n      //   \"=\" +\n      //   (\"/\" ? \";path=\" + \"/\" : \"\") +\n      //   \";expires=Thu, 01 Jan 1970 00:00:01 GMT\";\n      // window.location.replace(\"/login\");\n    };\n  }\n\n  const handleSendMsg = async msg => {\n    if (!room) {\n      alert(\"먼저 방에 입장해 주세요\");\n    } else {\n      if (!socketH) {\n        alert(\"socket 설정이 아직 진행되지 않았습니다.\");\n      } else {\n        console.log(socketH);\n        socketH.send(JSON.stringify({\n          Message: msg,\n          Room: room\n        }));\n      }\n    }\n  };\n\n  const enterRoom = async name => {\n    setRoom(name);\n  };\n\n  const goBack = () => {\n    setRoom(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: [!room ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"user-details\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"username\",\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"\\uCC44\\uD305\\uBC29 \\uB9AC\\uC2A4\\uD2B8\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(MakeNewRoom, {\n          setChattingList: setChattingList\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => goBack(),\n        children: \"\\uB4A4\\uB85C \\uAC00\\uAE30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Logout, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"room-list\",\n      children: !room ? chattingList.length !== 0 ? chattingList.map((result, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `room`,\n        onClick: () => {\n          enterRoom(result.name);\n        },\n        children: result.name\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 15\n      }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"ttest\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: chatContents.length !== 0 ? chatContents.map((result, index) => {\n          const isMyText = result.name === userName;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `message ${isMyText ? \"sended\" : \"received\"}`,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"content-box\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"content-header\",\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: result.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 144,\n                  columnNumber: 27\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 143,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"content\",\n                children: result.message\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 146,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 23\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 21\n          }, this);\n        }) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), room && /*#__PURE__*/_jsxDEV(ChatInput, {\n      handleSendMsg: handleSendMsg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 16\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ChatContainer, \"tX+AKfgnrOwJyWsL2TridoJ7/Jg=\", false, function () {\n  return [useGlobalData];\n});\n\n_c = ChatContainer;\nconst Container = styled.div`\n  display: grid;\n  grid-template-rows: 10% 80% 10%;\n  gap: 0.1rem;\n  overflow: hidden;\n  @media screen and (min-width: 720px) and (max-width: 1080px) {\n    grid-template-rows: 15% 70% 15%;\n  }\n  .chat-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 0 2rem;\n    .user-details {\n      display: flex;\n      align-items: center;\n      gap: 1rem;\n      .avatar {\n        img {\n          height: 3rem;\n        }\n      }\n      .username {\n        h3 {\n          color: white;\n        }\n      }\n    }\n  }\n  .room-list {\n    padding: 1rem 2rem;\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n    overflow: auto;\n\n    .room {\n      padding: 1rem 1rem;\n      background-color: yellow;\n      cursor: hover;\n    }\n\n    &::-webkit-scrollbar {\n      width: 0.2rem;\n      &-thumb {\n        background-color: #ffffff39;\n        width: 0.1rem;\n        border-radius: 1rem;\n      }\n    }\n    .message {\n      display: flex;\n      align-items: center;\n\n      .content-box {\n        flex-direction: column;\n        max-width: 40%;\n\n        .content-header {\n          display: flex;\n          flex-direction: row;\n\n          span {\n            display: flex;\n            color: #fff;\n            align-items: flex-end;\n            padding-left: 5px;\n          }\n          img {\n            width: 50px;\n            height: 50px;\n            border-radius: 50%;\n          }\n        }\n        .content {\n          overflow-wrap: break-word;\n          padding: 1rem;\n          font-size: 1.1rem;\n          border-radius: 1rem;\n          color: #d1d1d1;\n          @media screen and (min-width: 720px) and (max-width: 1080px) {\n            max-width: 70%;\n          }\n        }\n      }\n    }\n    .sended {\n      justify-content: flex-end;\n      .content {\n        background-color: #4f04ff21;\n      }\n    }\n    .recieved {\n      justify-content: flex-start;\n      .content {\n        background-color: #9900ff20;\n      }\n    }\n  }\n`;\n_c2 = Container;\nconst Button = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 0.5rem;\n  border-radius: 0.5rem;\n  background-color: #9a86f3;\n  border: none;\n  cursor: pointer;\n  svg {\n    font-size: 1.3rem;\n    color: #ebe7ff;\n  }\n`;\n_c3 = Button;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"ChatContainer\");\n$RefreshReg$(_c2, \"Container\");\n$RefreshReg$(_c3, \"Button\");","map":{"version":3,"sources":["/Users/kimhyeonseo/Desktop/inflearn/golang_chat/frontend/src/components/ChatContainer.jsx"],"names":["React","useEffect","useState","styled","ChatInput","Logout","MakeNewRoom","host","socketHost","axios","useGlobalData","ChatContainer","userName","chattingList","setChattingList","room","setRoom","chatContents","setChatContents","socketH","setSocketH","storage","fetchRoomList","list","get","data","result","setSocket","console","log","fetchBeforeChat","res","length","socket","WebSocket","onopen","current","readyState","send","onmessage","e","receiveData","JSON","parse","onclose","handleSendMsg","msg","alert","stringify","Message","Room","enterRoom","name","goBack","map","index","isMyText","message","Container","div","Button","button"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport ChatInput from \"./ChatInput\";\nimport Logout from \"./Logout\";\nimport MakeNewRoom from \"./MakeNewRoom\";\nimport { host, socketHost } from \"../utils/APIRoutes\";\nimport axios from \"axios\";\nimport { useGlobalData } from \"../context/context\";\n\nexport default function ChatContainer({ userName }) {\n  const [chattingList, setChattingList] = useState([]);\n  const [room, setRoom] = useState(false);\n\n  const [chatContents, setChatContents] = useState([]);\n  const [socketH, setSocketH] = useState(false);\n\n  const storage = useGlobalData();\n\n  useEffect(() => {\n    if (!room) {\n      async function fetchRoomList() {\n        const list = await axios.get(host + \"/room-list\");\n        setChattingList(list.data.result);\n      }\n\n      fetchRoomList();\n      setChatContents([]);\n      storage.setSocket(false);\n    } else {\n      console.log(room);\n      async function fetchBeforeChat() {\n        const res = await axios.get(host + `/enter-room?name=${room}`);\n        if (chatContents.length === 0) {\n          setChatContents(res.data.result);\n        }\n      }\n\n      fetchBeforeChat();\n\n      const socket = new WebSocket(socketHost);\n      setSocketH(socket);\n    }\n  }, [room]);\n\n  if (socketH) {\n    socketH.onopen = () => {\n      //webSocket이 맺어지고 난 후, 실행\n      console.log(socketH.current.readyState);\n      socketH.current.send(\"success\");\n    };\n\n    socketH.onmessage = function (e) {\n      const receiveData = JSON.parse(e.data);\n\n      console.log(chatContents);\n\n      if (chatContents.length === 0) {\n        setChatContents([receiveData]);\n      } else {\n        setChatContents([...chatContents, receiveData]);\n      }\n    };\n\n    socketH.onclose = function (e) {\n      console.log(e);\n      // alert(\"서버가 닫혀있기 떄문에 로그아웃 됩니다.\");\n\n      // document.cookie =\n      //   \"auth\" +\n      //   \"=\" +\n      //   (\"/\" ? \";path=\" + \"/\" : \"\") +\n      //   \";expires=Thu, 01 Jan 1970 00:00:01 GMT\";\n\n      // window.location.replace(\"/login\");\n    };\n  }\n\n  const handleSendMsg = async (msg) => {\n    if (!room) {\n      alert(\"먼저 방에 입장해 주세요\");\n    } else {\n      if (!socketH) {\n        alert(\"socket 설정이 아직 진행되지 않았습니다.\");\n      } else {\n        console.log(socketH);\n        socketH.send(JSON.stringify({ Message: msg, Room: room }));\n      }\n    }\n  };\n\n  const enterRoom = async (name) => {\n    setRoom(name);\n  };\n\n  const goBack = () => {\n    setRoom(false);\n  };\n\n  return (\n    <Container>\n      <div className=\"chat-header\">\n        {!room ? (\n          <div className=\"user-details\">\n            <div className=\"username\">\n              <h3>채팅방 리스트</h3>\n            </div>\n            <MakeNewRoom setChattingList={setChattingList} />\n          </div>\n        ) : (\n          <Button onClick={() => goBack()}>뒤로 가기</Button>\n        )}\n\n        <Logout />\n      </div>\n      <div className=\"room-list\">\n        {!room ? (\n          chattingList.length !== 0 ? (\n            chattingList.map((result, index) => (\n              <div\n                className={`room`}\n                key={index}\n                onClick={() => {\n                  enterRoom(result.name);\n                }}\n              >\n                {result.name}\n              </div>\n            ))\n          ) : (\n            <div>ttest</div>\n          )\n        ) : (\n          <div>\n            {chatContents.length !== 0\n              ? chatContents.map((result, index) => {\n                  const isMyText = result.name === userName;\n                  return (\n                    <div\n                      className={`message ${isMyText ? \"sended\" : \"received\"}`}\n                      key={index}\n                    >\n                      <div className=\"content-box\">\n                        <div className=\"content-header\">\n                          <span>{result.name}</span>\n                        </div>\n                        <div className=\"content\">{result.message}</div>\n                      </div>\n                    </div>\n                  );\n                })\n              : null}\n          </div>\n        )}\n      </div>\n      {room && <ChatInput handleSendMsg={handleSendMsg} />}\n    </Container>\n  );\n}\n\nconst Container = styled.div`\n  display: grid;\n  grid-template-rows: 10% 80% 10%;\n  gap: 0.1rem;\n  overflow: hidden;\n  @media screen and (min-width: 720px) and (max-width: 1080px) {\n    grid-template-rows: 15% 70% 15%;\n  }\n  .chat-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 0 2rem;\n    .user-details {\n      display: flex;\n      align-items: center;\n      gap: 1rem;\n      .avatar {\n        img {\n          height: 3rem;\n        }\n      }\n      .username {\n        h3 {\n          color: white;\n        }\n      }\n    }\n  }\n  .room-list {\n    padding: 1rem 2rem;\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n    overflow: auto;\n\n    .room {\n      padding: 1rem 1rem;\n      background-color: yellow;\n      cursor: hover;\n    }\n\n    &::-webkit-scrollbar {\n      width: 0.2rem;\n      &-thumb {\n        background-color: #ffffff39;\n        width: 0.1rem;\n        border-radius: 1rem;\n      }\n    }\n    .message {\n      display: flex;\n      align-items: center;\n\n      .content-box {\n        flex-direction: column;\n        max-width: 40%;\n\n        .content-header {\n          display: flex;\n          flex-direction: row;\n\n          span {\n            display: flex;\n            color: #fff;\n            align-items: flex-end;\n            padding-left: 5px;\n          }\n          img {\n            width: 50px;\n            height: 50px;\n            border-radius: 50%;\n          }\n        }\n        .content {\n          overflow-wrap: break-word;\n          padding: 1rem;\n          font-size: 1.1rem;\n          border-radius: 1rem;\n          color: #d1d1d1;\n          @media screen and (min-width: 720px) and (max-width: 1080px) {\n            max-width: 70%;\n          }\n        }\n      }\n    }\n    .sended {\n      justify-content: flex-end;\n      .content {\n        background-color: #4f04ff21;\n      }\n    }\n    .recieved {\n      justify-content: flex-start;\n      .content {\n        background-color: #9900ff20;\n      }\n    }\n  }\n`;\n\nconst Button = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 0.5rem;\n  border-radius: 0.5rem;\n  background-color: #9a86f3;\n  border: none;\n  cursor: pointer;\n  svg {\n    font-size: 1.3rem;\n    color: #ebe7ff;\n  }\n`;\n"]},"metadata":{},"sourceType":"module"}